namespace Cx.Example {
    static class Numbers {
        static Run() {
            // Initialisation
            int uninitialisedInt // Initialised with 0
            int defaultInt = default // Initialised with 0
            int fullInitialisedInt = 1;

            // Integers (inferred from suffixes)
            var byteInteger = 1|B // Unsigned byte 8bit int (Type: Byte)
            var signedByteInteger = -1|SB // Signed byte 8bit int (Type: SByte)

            var unsignedShortInteger = 1|US // (Type: UInt16)
            var shortInteger = -1|S // (Type: Int16)

            var unsignedInteger = 1|U // Unsigned 32bit int by default (Type: UInt32)
            var integer = 1 // Signed 32bit int by default (Type: Int32)

            var unsignedLongInteger = 1|UL // Unsigned 64bit int (Type: UInt64)
            var longInteger = -1|L // Signed 64bit int (Type: Int64)

            // Floating points (inferred from suffixes)
            var floatingPoint = 1.0|F // Signed 32bit floating point
            var doublePrecisionFloatingPoint = 1.0 // Signed 64bit floating point by default
            var decimalFloatingPoint = 1.0|D // Signed 128bit floating point
            var octuplePrecisionFloatingPoint = 1.0|O // // Signed 256bit floating point

            // Hex
            var hex = 0x2A

            // Binary
            vaf binary = 0b_0010_1010 // NOTE: _ digit separater is just whitespace at compile time
        }
    }
}

// From C#
// L or l for a long
// (l in small letters should be avoided as it confuses you with digit 1
// D or d for double
// F or f for float
// M or m for decimal
// (D is already taken for double, so M is best representation for deci mal
// U or u for unsigned integer
// UL or ul for unsigned long

// sbyte	-128 to 127	Signed 8-bit integer	System.SByte
// byte	0 to 255	Unsigned 8-bit integer	System.Byte
// short	-32,768 to 32,767	Signed 16-bit integer	System.Int16
// ushort	0 to 65,535	Unsigned 16-bit integer	System.UInt16
// int	-2,147,483,648 to 2,147,483,647	Signed 32-bit integer	System.Int32
// uint	0 to 4,294,967,295	Unsigned 32-bit integer	System.UInt32
// long	-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807	Signed 64-bit integer	System.Int64
// ulong	0 to 18,446,744,073,709,551,615	Unsigned 64-bit integer	System.UInt64
// nint	Depends on platform (computed at runtime)	Signed 32-bit or 64-bit integer	System.IntPtr
// nuint

// float	±1.5 x 10−45 to ±3.4 x 1038	~6-9 digits	4 bytes	System.Single
// double	±5.0 × 10−324 to ±1.7 × 10308	~15-17 digits	8 bytes	System.Double
// decimal	±1.0 x 10-28 to ±7.9228 x 1028	28-29 digits	16 bytes